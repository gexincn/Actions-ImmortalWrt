#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#

name: ImmortalWrt-X86_24.10-SNAPSHOT

permissions: write-all

on:
  repository_dispatch:
    types: [Source Code Update - ImmortalWrt]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: immortalwrt.24.10.1.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Free up disk space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
        libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
        libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
        ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
        python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
        upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Export build date
      run: |
        echo "BUILD_DATE_FULL=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_ENV      

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_${BUILD_DATE//./}" >> $GITHUB_ENV

    - name: Detect target architecture
      if: steps.compile.outputs.status == 'success'
      run: |
        ARCH_DIR=$(ls -d openwrt/bin/targets/*/* | head -n1)
        ARCH=$(basename $(dirname "$ARCH_DIR"))_$(basename "$ARCH_DIR")
        echo "ARCH=$ARCH" >> $GITHUB_ENV

    - name: Get ImmortalWrt version
      if: steps.compile.outputs.status == 'success'
      id: iwrt_version
      run: |
        cd openwrt
        version=$(grep ^RELEASE_VERSION include/version.mk | cut -d '=' -f2 | tr -d ' "')
        revision=$(grep ^RELEASE_REV include/version.mk | cut -d '=' -f2 | tr -d ' "')
        echo "IMMORTALWRT_VERSION=${version}-${revision}" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *.bin *.buildinfo *.json *.manifest packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.ARCH }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Get Passwall version
      id: passwall
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        tag=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | jq -r .tag_name)
        echo "PASSWALL_VERSION=$tag" >> $GITHUB_ENV

    - name: Get MosDNS version
      id: mosdns
      run: |
        tag=$(curl -s https://api.github.com/repos/IrineSistiana/mosdns/releases/latest | jq -r .tag_name)
        echo "MOSDNS_VERSION=$tag" >> $GITHUB_ENV

    - name: Get OpenClash version
      id: openclash
      run: |
        curl -s https://raw.githubusercontent.com/immortalwrt/luci/openwrt-24.10/applications/luci-app-openclash/Makefile \
          | grep PKG_VERSION \
          | cut -d '=' -f 2 \
          | tr -d ' ' \
          | tee version.txt
        echo "OPENCLASH_VERSION=$(cat version.txt)" >> $GITHUB_ENV

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        source $GITHUB_ENV
        release_tag=${BUILD_DATE_FULL}-24.10_${ARCH}
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

        echo "🚀 固件信息" > release.txt
        echo "==========================" >> release.txt
        echo "" >> release.txt
        echo "🧬 源码: ImmortalWrt 24.10" >> release.txt
        echo "🆔 版本: $IMMORTALWRT_VERSION" >> release.txt
        echo "🌐 架构: $ARCH" >> release.txt
        echo "" >> release.txt
        echo "🔌 插件:" >> release.txt
        echo "- 🌐 Passwall: $PASSWALL_VERSION" >> release.txt
        echo "- ⚙️ MosDNS: $MOSDNS_VERSION" >> release.txt
        echo "- 🎮 OpenClash: $OPENCLASH_VERSION" >> release.txt
        echo "- 🌍 DDNS" >> release.txt
        echo "" >> release.txt
        echo "💾 默认分区:" >> release.txt
        echo "- 🔹 内核分区：32MB" >> release.txt
        echo "- 🔸 根文件系统：1GB" >> release.txt
        echo "" >> release.txt
        echo "🌐 默认管理地址: http://192.168.1.1" >> release.txt
        echo "👤 用户名: \`root\`" >> release.txt
        echo "🔒 密码: （空）" >> release.txt

        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2.0.4
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
